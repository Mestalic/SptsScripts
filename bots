
task.wait();
if not game:IsLoaded() then
	game.Loaded:Wait();
end
local args = {...};
local controller = args[1].controller;
local bots = args[1].bots;
local config = args[1].config;
if not (game:GetService("Players").LocalPlayer.Name == controller['MainAccount']) then
	local UserSettings = UserSettings();
	UserSettings.GameSettings.MasterVolume = 0;
	setfpscap(30);
	game:GetService("RunService"):Set3dRenderingEnabled(false);
	for i, v in next, workspace:GetDescendants() do
		if v:IsA("Seat") then
			v:Destroy();
		end
	end
	task.wait();
	repeat
		task.wait();
	until game:GetService("Players").LocalPlayer 
	local connections = getconnections or get_signal_cons;
	if connections then
		for _, v in pairs(connections(game:GetService("Players").LocalPlayer.Idled)) do
			if v.Disable then
				v:Disable();
			elseif v.Disconnect then
				v:Disconnect();
			end
		end
	end
end
for i, botName in ipairs(bots) do
	if ((game:GetService("Players").LocalPlayer.Name == botName) and (config['SendJoinMsg'] == true)) then
		ohString1 = "A bot has loaded! [Bot " .. i .. " of " .. #bots .. "]";
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(ohString1, "All");
		task.wait();
	end
end
if not (game:GetService("Players").LocalPlayer.Name == controller['MainAccount']) then
	game:GetService("Players"):FindFirstChild(controller['MainAccount']).Chatted:Connect(function(msg)
		local args = string.split(string.lower(msg), " ");
		local cmd = args[1];
		local function chatmsg(message, target)
			target = target or "All";
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, target);
		end
		if (cmd == ".say") then
			local say_msg = string.sub(msg, string.len(cmd) + 2, string.len(msg));
			ohString1 = say_msg;
			chatmsg(ohString1);
		end
		local args = string.split(string.lower(msg), " ");
		local cmd = args[1];
		if (cmd == ".slowspam") then
			getgenv().LoopSlowSpam = false;
			getgenv().LoopFastSpam = false;
			local say_msg = string.sub(msg, string.len(cmd) + 2, string.len(msg));
			getgenv().LoopSlowSpam = true;
			while getgenv().LoopSlowSpam == true do
				task.wait(2);
				ohString1 = say_msg;
				chatmsg(ohString1);
			end
		end
		if (cmd == ".fastspam") then
			getgenv().LoopFastSpam = false;
			getgenv().LoopSlowSpam = false;
			local say_msg = string.sub(msg, string.len(cmd) + 2, string.len(msg));
			getgenv().LoopFastSpam = true;
			while getgenv().LoopFastSpam == true do
				task.wait();
				ohString1 = say_msg;
				chatmsg(ohString1);
			end
		end
		if (msg == ".unspam") then
			getgenv().LoopFastSpam = false;
			getgenv().LoopSlowSpam = false;
		end
		if (msg == ".rj") then
			game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game:GetService("Players").LocalPlayer);
		end
		if (msg == ".cmds") then
			if (game.Players.LocalPlayer.Name == bots[1]) then
				task.wait();
				chatmsg("Cmds With Arguments Pg 1: .say [args] | .slowspam [args] | .fastspam [args] | .8ball [args] | .wall [plr] | .line [plr] | .swarm [plr] | .lookat [plr] | .follow [plr] | .goto [plr] | .stack [plr]");
				task.wait(1);
				chatmsg("Cmds With Arguments Pg 2: .runlua [code] | .calculate [equation]");
				task.wait(1);
				chatmsg("Cmds Without Arguments List: .re | .rj | .rje |.playercount | .dance1 | .dance2 | .dance3 | .dance4 | .laugh | .wave | .cheer | .point | .jump | .sv | .sit | .unsit | .leg | .rescale");
				task.wait(1);
				chatmsg("Stop Cmds: .stop (for wall,swarm,line,lookat,follow cmds) | .unspam (for slowspam,fastspam cmds) | .stopemotes (self explanatory)");
			elseif (game.Players.LocalPlayer.Name ~= bots[1]) then
			end
		end
		if (msg == ".jump") then
			game:GetService("Players").LocalPlayer.Character.Humanoid.Jump = true;
		end
		if (msg == ".sit") then
			game:GetService("Players").LocalPlayer.Character.Humanoid.Sit = true;
		end
						if (msg == ".xd") then
						    local Players, Player, Character
        Players = game:GetService("Players")
        Player = Players.LocalPlayer
        Character = Player.Character
local Ascii = [==[
        ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        ██░█▀▄██▄██░██░████░██░█▀▄▄▀█░██░█░▄▄▀█░▄▄█░▄▄█░██░▄▄███▄▀█▀▄██░▄▄▀
        ██░▄▀███░▄█░██░████░▀▀░█░██░█░██░█░▀▀▄█▄▄▀█░▄▄█░██░▄██████░████░██░
        ██░██░█▄▄▄█▄▄█▄▄███▀▀▀▄██▄▄███▄▄▄█▄█▄▄█▄▄▄█▄▄▄█▄▄█▄█████▀▄█▄▀██░▀▀░
        ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
        ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        ██░█▀▄██▄██░██░████░██░█▀▄▄▀█░██░█░▄▄▀█░▄▄█░▄▄█░██░▄▄███▄▀█▀▄██░▄▄▀
        ██░▄▀███░▄█░██░████░▀▀░█░██░█░██░█░▀▀▄█▄▄▀█░▄▄█░██░▄██████░████░██░
        ██░██░█▄▄▄█▄▄█▄▄███▀▀▀▄██▄▄███▄▄▄█▄█▄▄█▄▄▄█▄▄▄█▄▄█▄█████▀▄█▄▀██░▀▀░
        ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
        ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        ██░█▀▄██▄██░██░████░██░█▀▄▄▀█░██░█░▄▄▀█░▄▄█░▄▄█░██░▄▄███▄▀█▀▄██░▄▄▀
        ██░▄▀███░▄█░██░████░▀▀░█░██░█░██░█░▀▀▄█▄▄▀█░▄▄█░██░▄██████░████░██░
        ██░██░█▄▄▄█▄▄█▄▄███▀▀▀▄██▄▄███▄▄▄█▄█▄▄█▄▄▄█▄▄▄█▄▄█▄█████▀▄█▄▀██░▀▀░
        ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
        ]==]
        
        Character.HumanoidRootPart.CFrame = CFrame.new(-21,643877876764,5423)
        local Tool = Player.Backpack:FindFirstChildWhichIsA("Tool", true) or Character:FindFirstChildWhichIsA("Tool", true)
        if Tool == nil then 
            print("[Error]: No Tool detected.") 
            return
        end
        
        Tool.Parent = Character
wait(0.1)
Character.HumanoidRootPart.Anchored = true
        while true do
        for i = 1, 10000 do
            Tool.Remote:FireServer("PlaySong", "\n" .. Ascii)
        end
        wait(27)
    end
						end
					    if (msg == ".mhatfling") then
		_G.Whitelist = {
    508960114,
}


if (not game:IsLoaded()) then
	game.Loaded:Wait();
end
for _, obj in ipairs(workspace:GetDescendants()) do
    if obj:IsA("Seat") and obj.Occupant == nil then
        seat = obj
        obj:Sit(game.Players.LocalPlayer.Character.Humanoid)
        break
    end
end
local lp = game.Players.LocalPlayer

repeat wait() until lp and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") and lp.Character:FindFirstChild("Animate")
lp.Character.RightHand:remove()
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

-- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Teleport() after it collected everything.
--rescale hat by AnthonyIsntHere (old as fuck)
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

local function Message(MTitle,MText,Time)
    game:GetService("StarterGui"):SetCore("SendNotification",{Title = MTitle,Text = MText,Icon = "rbxassetid://2541869220",Duration = Time})
end

local PlayerMetaVars = {}

PlayerMetaVars["Character"] = Player.Character or false
PlayerMetaVars["Humanoid"] = PlayerMetaVars["Character"] and PlayerMetaVars["Character"]:FindFirstChildOfClass("Humanoid") or false
PlayerMetaVars["RootPart"] = PlayerMetaVars["Humanoid"] and PlayerMetaVars["Humanoid"].RootPart or false
PlayerMetaVars["Head"] = PlayerMetaVars["Character"] and PlayerMetaVars["Character"]:FindFirstChild("Head") or false
PlayerMetaVars["Torso"] = PlayerMetaVars["Character"] and PlayerMetaVars["Character"]:FindFirstChild("Torso") or PlayerMetaVars["Character"] and PlayerMetaVars["Character"]:FindFirstChild("UpperTorso") or false

local ErrorCheck = false

for _,x in next, PlayerMetaVars do
    if not x then
        Message("Error:", _.." not valid.")
        ErrorCheck = true
    end
end

if ErrorCheck then return end

coroutine.wrap(function()
    for _,x in next, PlayerMetaVars.Humanoid:GetChildren() do
        if x:IsA("ValueBase") then
            for _,v in next, PlayerMetaVars.Humanoid:GetAccessories() do
                if v:FindFirstChild("OriginalSize", true) then
                    v:FindFirstChild("OriginalSize", true):Destroy()
                end
            end
            x:Destroy()
            PlayerMetaVars.Humanoid:GetAccessories()[#PlayerMetaVars.Humanoid:GetAccessories()].DescendantAdded:wait()
            task.wait()
        end
    end
end)()
--funny hat fling
local function netpos(basepart, pos, vel)
    basepart.CFrame = (pos)
    basepart.Velocity = Vector3.new(vel, 0, 0)
    local old = basepart.CFrame
    basepart.CFrame = basepart.CFrame * CFrame.new(0, 0.05, 0)
    basepart.CFrame = old
    basepart.Velocity = Vector3.new(0, vel, 0)
end
Player.Character = nil
Player.Character = PlayerMetaVars.Character
wait(Players.RespawnTime + 0.4)
if game.PlaceId == 417267366 then
game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
task.wait()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(5500, 33, -17112)
end
-- HUGE CREDITS TO SHOWNAPE FOR METHOD
PlayerMetaVars.RootPart:Destroy()
table.foreach(PlayerMetaVars.Character:GetChildren(), function(_,v)
    if v:IsA("BasePart") and v.Name ~= "Head" then
        v:Destroy()
    end
end)
PlayerMetaVars.Head:Destroy()

local oldcf = PlayerMetaVars.RootPart.CFrame

for _,x in next, PlayerMetaVars.Humanoid:GetAccessories() do
    local Handle = x:FindFirstChild("Handle") or false
    local AccWeld = Handle and Handle:FindFirstChild("AccessoryWeld") or false
    if not Handle or not AccWeld then return Message("Error", "Handle Missing.") end
    AccWeld:Destroy()
    local fling = Instance.new("BodyAngularVelocity", Handle)
    fling.MaxTorque = Vector3.new(1/0,1/0,1/0)
    fling.AngularVelocity = Vector3.new(9e11,9e11,9e11)
    coroutine.wrap(function()
Workspace.CurrentCamera.CameraSubject = Handle
        while Player.Character == PlayerMetaVars.Character and Handle do
            netpos(Handle, Handle.CFrame * CFrame.new(0, 0.1, 0), 100)
            for _,x in next, Players:GetPlayers() do
                local xCharacter = x.Character or false
                local xHumanoid = xCharacter and xCharacter:FindFirstChildWhichIsA("Humanoid") or false
                local xPrimaryPart = xCharacter and xCharacter.PrimaryPart or false
                if x ~= Player and xCharacter and xHumanoid and not (xHumanoid.SeatPart or xHumanoid.Sit) and xPrimaryPart then
    					  if x ~= game.Players.LocalPlayer and not table.find(_G.Whitelist, x.UserId) then
                    if xPrimaryPart.Velocity.Magnitude < 300 then
                        netpos(Handle, x.Character.PrimaryPart.CFrame, 100)
                    end
                else
                    if x ~= Player then
                        netpos(Handle, oldcf, 100)
                    end
                end
            end
            RunService.Heartbeat:wait()
                end
            end
    end)()
    coroutine.wrap(function()
        while PlayerMetaVars.Character and Handle do
            Handle.CanCollide = false
            RunService.Stepped:wait()
        end
    end)()
end

local save = {}
		
		for i,v in next, workspace:GetChildren() do
			if v:IsA'Model' then
				if not game.Players:GetPlayerFromCharacter(v) then
					save[#save + 1] = v
				end
			else
				if v.ClassName == "Part" then
					save[#save + 1] = v
				end
			end
		end
		
		for i,v in next, save do
			v.Parent = game.Lighting
		end
					    end
			if (msg == ".rhand") then
		game.Players.LocalPlayer.Character.RightHand:remove()
			end

		if (msg == ".fling") then
local Targets = {args[2]}
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

local AllBool = false

local OldFPDH = workspace.FallenPartsDestroyHeight

local function GetPlayer(Name)
    Name = Name:lower()
    if Name == "all" or Name == "others" then
        AllBool = true
        return
    elseif Name == "random" then
        local GetPlayers = Players:GetPlayers()
        if table.find(GetPlayers,Player) then table.remove(GetPlayers,table.find(GetPlayers,Player)) end
        return GetPlayers[math.random(#GetPlayers)]
    elseif Name ~= "random" and Name ~= "all" and Name ~= "others" then
        for _,x in next, Players:GetPlayers() do
            if x ~= Player then
                if x.Name:lower():match("^"..Name) then
                    return x;
                elseif x.DisplayName:lower():match("^"..Name) then
                    return x;
                end
            end
        end
    else
        return
    end
end

local function SkidFling(TargetPlayer)
    local Character = Player.Character
    local Humanoid = Character:FindFirstChildOfClass("Humanoid")
    local RootPart = Humanoid.RootPart
    local OldPos
    
    local TCharacter = TargetPlayer.Character
    local THumanoid
    local TRootPart
    local THead
    local Accessory
    local Handle
    
    if TCharacter:FindFirstChildOfClass("Humanoid") then
        THumanoid = TCharacter:FindFirstChildOfClass("Humanoid")
    end
    if THumanoid and THumanoid.RootPart then
        TRootPart = THumanoid.RootPart
    end
    if TCharacter:FindFirstChild("Head") then
        THead = TCharacter.Head
    end
    if TCharacter:FindFirstChildOfClass("Accessory") then
        Accessory = TCharacter:FindFirstChildOfClass("Accessory")
    end
    if Accessory and Accessory:FindFirstChild("Handle") then
        Handle = Accessory.Handle
    end
    
    if Character and Humanoid and RootPart then
        OldPos = RootPart.CFrame
        if THead then
            workspace.CurrentCamera.CameraSubject = THead
        elseif not THead and Handle then
            workspace.CurrentCamera.CameraSubject = Handle
        else
            workspace.CurrentCamera.CameraSubject = THumanoid
        end
        if not TCharacter:FindFirstChildWhichIsA("BasePart") then
            return
        end
        local function FPos(BasePart,Pos,Ang)
            RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
            RootPart.Velocity = Vector3.new(11e30,11e30,11e30)
            RootPart.RotVelocity = Vector3.new(11e30,11e30,11e30)
        end
local Clip = nil

function noclip()
	Clip = false
	local function Nocl()
		if Clip == false and game.Players.LocalPlayer.Character ~= nil then
			for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
				if v:IsA('BasePart') and v.CanCollide and v.Name ~= floatName then
					v.CanCollide = false
				end
			end
		end
		wait(0.21) -- basic optimization
	end
	Noclip = game:GetService('RunService').Stepped:Connect(Nocl)
end

function clip()
	if Noclip then Noclip:Disconnect() end
	Clip = true
end

noclip()
        local function SFBasePart(BasePart)
            local TimeToWait = 5
            local Time = tick()
            local Angle = 64
            
            repeat
                if RootPart and THumanoid then
                    if BasePart.Velocity.Magnitude < 30 then
                        Angle = 100 + 273

                                                FPos(BasePart,CFrame.new(0,0,0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.65,CFrame.Angles(math.rad(Angle),10,20))
                        game:GetService("RunService").Heartbeat:wait()
                        game.Players.LocalPlayer.Character.Humanoid.Sit = false
                        FPos(BasePart,CFrame.new(0,-2,0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.65,CFrame.Angles(math.rad(Angle),10,42))
                        game:GetService("RunService").Heartbeat:wait()
                        


                        
                        
                    else
                        FPos(BasePart,CFrame.new(0,-2.5,0),CFrame.Angles(math.rad(-10),0,0))
                        game:GetService("RunService").Heartbeat:wait()
                    end
                else
                    break
                end
            until BasePart.Velocity.Magnitude > 1000 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or THumanoid.Sit or Humanoid.Health <= 0 or tick() > Time + TimeToWait
        end
        workspace.FallenPartsDestroyHeight = 0/0
        local BV = Instance.new("BodyVelocity")
        BV.Parent = RootPart
        BV.Velocity = Vector3.new(11e30,11e30,11e30)
        BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)
        if TRootPart and THead then
            if (TRootPart.CFrame.p - THead.CFrame.p).Magnitude > 5 then
                SFBasePart(THead)
            else
                SFBasePart(TRootPart)
            end
        elseif TRootPart and not THead then
            SFBasePart(TRootPart)
        elseif not TRootPart and THead then
            SFBasePart(THead)
        elseif not TRootPart and not THead and Accessory and Handle then
            SFBasePart(Handle)
        else
        end
        BV:Destroy()
        for _,x in next, Character:GetDescendants() do
            if x:IsA("BasePart") then
                x.Velocity,x.RotVelocity = Vector3.new(),Vector3.new()
            end
        end
        game.Players.LocalPlayer.Character.Humanoid.Sit = false
        wait(0.1)
        clip()
        for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
            if v:IsA("BasePart") then
                v.Velocity, v.RotVelocity, v.AssemblyAngularVelocity, v.AssemblyLinearVelocity =
                    Vector3.new(),
                    Vector3.new(),
                    Vector3.new(),
                    Vector3.new()
            end
        end
        Humanoid:ChangeState("GettingUp")
        RootPart.Anchored = false
        RootPart.CFrame = OldPos * CFrame.new(0,.5,0)
        for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
            if v:IsA("BasePart") then
                v.Velocity, v.RotVelocity, v.AssemblyAngularVelocity, v.AssemblyLinearVelocity =
                    Vector3.new(),
                    Vector3.new(),
                    Vector3.new(),
                    Vector3.new()
            end
        end
        workspace.CurrentCamera.CameraSubject = Humanoid
        workspace.FallenPartsDestroyHeight = OldFPDH
    else
        return Message("Error Occurred","Random error",5)
    end
end
getgenv().Welcome = true
if Targets[1] then for _,x in next, Targets do GetPlayer(x) end else return end

if AllBool then
    for _,x in next, Players:GetPlayers() do
        SkidFling(x)
    end
end

for _,x in next, Targets do
    if GetPlayer(x) and GetPlayer(x) ~= Player then
        if GetPlayer(x).UserId ~= 3207813237 and GetPlayer(x).UserId ~= 106305835 and GetPlayer(x).UserId ~= 207865772 then
            local TPlayer = GetPlayer(x)
            if TPlayer then
                SkidFling(TPlayer)
            end
        else
            Message("Error Occurred","This user is whitelisted! (Owner)",5)
        end
    elseif not GetPlayer(x) and not AllBool then
        Message("Error Occurred","Username Invalid",5)
    end
end
		end
		
		
				if (msg == ".xd2") then
				    local char = game:GetService('Players').LocalPlayer.Character or nil
if char then
char.HumanoidRootPart.CFrame = CFrame.new(0,9e9,17876)
task.wait(0.1)
char.HumanoidRootPart.Anchored = true
end
while wait(1.45) do --// don't change it's the best
game:GetService("NetworkClient"):SetOutgoingKBPSLimit(math.huge)
local function getmaxvalue(val)
   local mainvalueifonetable = 499999
   if type(val) ~= "number" then
       return nil
-- this crashed
   end
   local calculateperfectval = (mainvalueifonetable/(val+2))
   return calculateperfectval
end
 
local function bomb(tableincrease, tries)
local maintable = {}
local spammedtable = {}
 
table.insert(spammedtable, {})
z = spammedtable[1]
 
for i = 1, tableincrease do
    local tableins = {}
    table.insert(z, tableins)
    z = tableins
end
 
local calculatemax = getmaxvalue(tableincrease)
local maximum
 
if calculatemax then
     maximum = calculatemax
     else
     maximum = 1e1
end
 
for i = 1, maximum do
     table.insert(maintable, spammedtable)
end
 
for i = 1, tries do
     game.RobloxReplicatedStorage.SetPlayerBlockList:FireServer(maintable)
end
end
 
bomb(220, 4) --// change values if client crashes
end
				    end
		if (msg == ".leg") then
		    local Character = game.Players.LocalPlayer.Character
game.Players.LocalPlayer.Character.Animate:remove()
Character.LeftUpperLeg.LeftKneeRigAttachment:Destroy()
Character.LeftLowerLeg.LeftAnkleRigAttachment:Destroy()
Character.LeftFoot.LeftFootAttachment:Destroy()
for i,v in pairs(game.Players.LocalPlayer.Character.Humanoid:GetPlayingAnimationTracks()) do
    v:Stop()
end

local function scale()
    game.Players.LocalPlayer.Character["LeftFoot"]:WaitForChild'OriginalSize':Destroy()
    
game.Players.LocalPlayer.Character["LeftLowerLeg"]:WaitForChild'OriginalSize':Destroy()
    
game.Players.LocalPlayer.Character["LeftUpperLeg"]:WaitForChild'OriginalSize':Destroy()
end


for i,v in next, game.Players.LocalPlayer.Character.Humanoid:GetChildren() do
    if v:IsA'NumberValue' then
        scale()
        v:Destroy()
     end
end
end
		if (msg == ".rescale") then
			local character = game:GetService("Players").LocalPlayer.Character;
			local humanoid = character:FindFirstChildOfClass("Humanoid");
			local function wipe_parts()
				for _, part in pairs(character:GetDescendants()) do
					if (part:IsA("BasePart") and (part.Name ~= "Head")) then
						for _, attachment in pairs(part:GetDescendants()) do
							if (attachment:IsA("Attachment") and attachment:FindFirstChild("OriginalPosition")) then
								attachment.OriginalPosition:Destroy();
							end
						end
						part:WaitForChild("OriginalSize"):Destroy();
						if part:FindFirstChild("AvatarPartScaleType") then
							part:FindFirstChild("AvatarPartScaleType"):Destroy();
						end
					end
				end
			end
			wipe_parts();
			humanoid:WaitForChild("BodyTypeScale"):Destroy();
			wipe_parts();
			humanoid:WaitForChild("BodyWidthScale"):Destroy();
			wipe_parts();
			humanoid:WaitForChild("BodyDepthScale"):Destroy();
			wipe_parts();
			humanoid:WaitForChild("HeadScale"):Destroy();
		end
		if (msg == ".unsit") then
			game:GetService("Players").LocalPlayer.Character.Humanoid.Sit = false;
		end
		if (msg == ".dance1") then
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = true;
			task.wait();
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = false;
			game:GetService("Players"):Chat("/e dance");
		end
		if (msg == ".dance2") then
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = true;
			task.wait();
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = false;
			game:GetService("Players"):Chat("/e dance2");
		end
		if (msg == ".dance3") then
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = true;
			task.wait();
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = false;
			game:GetService("Players"):Chat("/e dance3");
		end
		if (msg == ".dance4") then
			local Anim = Instance.new("Animation");
			Anim.AnimationId = "rbxassetid://12874447851";
			local k = game:GetService("Players").LocalPlayer.Character.Humanoid:LoadAnimation(Anim);
			k:Play(0);
			k:AdjustSpeed(1);
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = true;
			game:GetService("Players").LocalPlayer.Character.Humanoid.Running:connect(function(speed)
				if (speed > 0) then
					game:GetService("Players").LocalPlayer.Character.Animate.Disabled = false;
					k:Stop(0);
				end
			end);
		end
		if (msg == ".laugh") then
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = true;
			task.wait();
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = false;
			game:GetService("Players"):Chat("/e laugh");
		end
		if (msg == ".wave") then
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = true;
			task.wait();
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = false;
			game:GetService("Players"):Chat("/e wave");
		end
		if (msg == ".cheer") then
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = true;
			task.wait();
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = false;
			game:GetService("Players"):Chat("/e cheer");
		end
		if (msg == ".point") then
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = true;
			task.wait();
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = false;
			game:GetService("Players"):Chat("/e point");
		end
		if (msg == ".stopemotes") then
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = true;
			task.wait();
			game:GetService("Players").LocalPlayer.Character.Animate.Disabled = false;
		end
		if (msg and (#msg >= 10) and (msg:sub(1, 10) == ".calculate")) then
			local equation = msg:sub(12);
			local result = loadstring("return " .. equation)();
			if (#equation == 0) then
				chatmsg("There must be a math equation after the .math command! | Usage: .math <equation>");
			else
				chatmsg("The answer to the equation you sent: " .. tostring(result));
			end
		end
		if (msg and (#msg >= 7) and (msg:sub(1, 7) == ".runlua")) then
			local luaCode = msg:sub(9);
			if (#luaCode == 0) then
				chatmsg("There must be code after the .runlua command! | Usage: .runlua <code>");
				return;
			end
			local success, result = pcall(loadstring(luaCode));
			if success then
				chatmsg("✅ | Successfully ran the LUA Code you sent!");
				if (result ~= nil) then
					chatmsg(result);
				end
			else
				chatmsg("❌ | " .. result);
			end
		end
		if (msg:sub(1, 6) == ".8ball") then
			local answers = {"It is certain.","Without a doubt.","You may rely on it.","Yes, definitely.","It is decidedly so.","As I see it, yes.","Most likely.","Yes.","Outlook good.","Signs point to yes.","Reply hazy, try again.","Better not tell you now.","Ask again later.","Cannot predict now.","Concentrate and ask again.","Don't count on it.","Outlook not so good.","My sources say no.","Very doubtful.","Signs point to no."};
			local response = answers[math.random(1, 20)];
			if (game.Players.LocalPlayer.Name == bots[1]) then
				chatmsg(response);
			elseif (game.Players.LocalPlayer.Name ~= bots[1]) then
			end
		end
		if (msg:sub(1, 6) == ".wall ") then
			getgenv().LoopSwarm, getgenv().LoopLine, getgenv().LoopWall, getgenv().LoopLook, getgenv().LoopFollow, getgenv().LoopGreet, getgenv().LoopStack = false, false, false, false, false, false, false;
			local player = game:GetService("Players"):GetPlayers()[(function()
				for i, plr in ipairs(game:GetService("Players"):GetPlayers()) do
					if ((string.lower(plr.Name):sub(1, string.len(msg:sub(7))) == string.lower(msg:sub(7))) or (string.lower(plr.DisplayName):sub(1, string.len(msg:sub(7))) == string.lower(msg:sub(7)))) then
						return i;
					end
				end
				return nil;
			end)()];
			if player then
				local botIndex = 1;
				for i, botName in pairs(bots) do
					if (string.lower(botName) == string.lower(game:GetService("Players").LocalPlayer.Name)) then
						botIndex = i;
						break;
					end
				end
				local offsets = {4,8,-4,-8,12,-12,16,-16,20,-20,24,-24,28,-28,32,-32,36,-36,40,-40};
				local offset = offsets[botIndex] or 0;
				if (player == game:GetService("Players").LocalPlayer) then
					chatmsg("The user you specified is one of your bots!");
				elseif table.find(bots, player.Name) then
					chatmsg("The user you specified is one of your bots!");
				else
					getgenv().LoopWall = true;
					while getgenv().LoopWall do
						game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = workspace[player.Name].HumanoidRootPart.CFrame * CFrame.new(offset, 0, 0);
						task.wait();
					end
				end
			end
		end
		if (msg:sub(1, 6) == ".line ") then
			getgenv().LoopSwarm, getgenv().LoopLine, getgenv().LoopWall, getgenv().LoopLook, getgenv().LoopFollow, getgenv().LoopGreet, getgenv().LoopStack = false, false, false, false, false, false, false;
			local player = game:GetService("Players"):GetPlayers()[(function()
				for i, plr in ipairs(game:GetService("Players"):GetPlayers()) do
					if ((string.lower(plr.Name):sub(1, string.len(msg:sub(7))) == string.lower(msg:sub(7))) or (string.lower(plr.DisplayName):sub(1, string.len(msg:sub(7))) == string.lower(msg:sub(7)))) then
						return i;
					end
				end
				return nil;
			end)()];
			if player then
				local botIndex = 1;
				for i, botName in pairs(bots) do
					if (string.lower(botName) == string.lower(game:GetService("Players").LocalPlayer.Name)) then
						botIndex = i;
						break;
					end
				end
				local offsets = {-2,-4,-6,-8,-10,-12,-14,-16,-18,-20,-22,-24,-26,-28,-30,-32,-34,-36,-38,-40};
				local offset = offsets[botIndex] or 0;
				if (player == game:GetService("Players").LocalPlayer) then
					chatmsg("The user you specified is one of your bots!");
				elseif table.find(bots, player.Name) then
					chatmsg("The user you specified is one of your bots!");
				else
					getgenv().LoopLine = true;
					while getgenv().LoopLine do
						game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = workspace[player.Name].HumanoidRootPart.CFrame * CFrame.new(0, 0, offset);
						task.wait();
					end
				end
			end
		end
		if (msg:sub(1, 7) == ".swarm ") then
			getgenv().LoopSwarm, getgenv().LoopLine, getgenv().LoopWall, getgenv().LoopFollow, getgenv().LoopGreet, getgenv().LoopStack = false, false, false, false, false, false;
			for i, plr in ipairs(game:GetService("Players"):GetPlayers()) do
				if (string.find(string.lower(plr.Name), string.lower(msg:sub(8))) or string.find(string.lower(plr.DisplayName), string.lower(msg:sub(8)))) then
					if (plr == game:GetService("Players").LocalPlayer) then
						chatmsg("The user you specified is one of your bots!");
					elseif table.find(bots, plr.Name) then
						chatmsg("The user you specified is one of your bots!");
					else
						local playerRootPart = game:GetService("Workspace"):FindFirstChild(plr.Name).HumanoidRootPart;
						if table.find(bots, game:GetService("Players").LocalPlayer.Name) then
							getgenv().LoopSwarm = true;
							while getgenv().LoopSwarm == true do
								game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = workspace[plr.Name].HumanoidRootPart.CFrame * CFrame.new(math.random(-5, 5), 0, math.random(-5, 5));
								task.wait();
							end
						end
					end
				end
			end
		end
		if (msg:sub(1, 8) == ".lookat ") then
			for _, plr in ipairs(game:GetService("Players"):GetPlayers()) do
				if ((string.lower(plr.Name):sub(1, string.len(msg:sub(9))) == string.lower(msg:sub(9))) or (string.lower(plr.DisplayName):sub(1, string.len(msg:sub(9))) == string.lower(msg:sub(9)))) then
					if table.find(bots, plr.Name) then
						chatmsg("The user you specified is one of your bots!");
					elseif (plr == game:GetService("Players").LocalPlayer) then
						chatmsg("The user you specified is one of your bots!");
					else
						local playerRootPart = game:GetService("Workspace"):FindFirstChild(plr.Name).HumanoidRootPart;
						getgenv().LoopLook = true;
						while getgenv().LoopLook == true do
							game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.lookAt(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position, workspace[plr.Name].HumanoidRootPart.Position);
							task.wait();
						end
					end
				end
			end
		end
		if (msg:sub(1, 8) == ".follow ") then
			local playerName = msg:sub(9);
			if (getgenv().LoopFollow == true) then
				getgenv().LoopFollow = false;
				task.wait();
			end
			getgenv().LoopSwarm, getgenv().LoopLine, getgenv().LoopWall, getgenv().LoopLook, getgenv().LoopFollow, getgenv().LoopGreet, getgenv().LoopStack = false, false, false, false, false, false, false;
			local Players = game:GetService("Players");
			local LocalPlayer = Players.LocalPlayer;
			local function followPlayer(playerName)
				for _, player in ipairs(Players:GetPlayers()) do
					if ((string.lower(player.Name):sub(1, #playerName) == string.lower(playerName)) or (string.lower(player.DisplayName):sub(1, #playerName) == string.lower(playerName))) then
						if (player == game:GetService("Players").LocalPlayer) then
							chatmsg("The user you specified is one of your bots!");
						elseif table.find(bots, player.Name) then
							chatmsg("The user you specified is one of your bots!");
						else
							local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart");
							if humanoidRootPart then
								getgenv().LoopFollow = true;
								while getgenv().LoopFollow == true do
									if ((LocalPlayer.Character.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude > 3) then
										LocalPlayer.Character.Humanoid:MoveTo(humanoidRootPart.Position);
									end
									task.wait();
								end
							end
						end
					end
				end
			end
			followPlayer(playerName);
		end
		if (msg:sub(1, 6) == ".to ") then
			getgenv().LoopSwarm, getgenv().LoopLine, getgenv().LoopWall, getgenv().LoopLook, getgenv().LoopFollow, getgenv().LoopGreet, getgenv().LoopStack = false, false, false, false, false, false, false;
			local playerName = msg:sub(7);
			local Players = game:GetService("Players");
			local LocalPlayer = Players.LocalPlayer;
			local function gotoPlayer(playerName)
				for _, player in ipairs(Players:GetPlayers()) do
					if ((string.lower(player.Name):sub(1, #playerName) == string.lower(playerName)) or (string.lower(player.DisplayName):sub(1, #playerName) == string.lower(playerName))) then
						if (player == LocalPlayer) then
							chatmsg("The user you specified is one of your bots!");
						elseif table.find(bots, player.Name) then
							chatmsg("The user you specified is one of your bots!");
						else
							local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart");
							if humanoidRootPart then
								LocalPlayer.Character.HumanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 0, -2);
								task.wait();
								LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.lookAt(LocalPlayer.Character.HumanoidRootPart.Position, player.Character.HumanoidRootPart.Position);
								task.wait();
							end
						end
					end
				end
			end
			gotoPlayer(playerName);
		end
		if (msg:sub(1, 7) == ".stack ") then
			getgenv().LoopSwarm, getgenv().LoopLine, getgenv().LoopWall, getgenv().LoopLook, getgenv().LoopFollow, getgenv().LoopStack = false, false, false, false, false, false;
			local player = game:GetService("Players"):GetPlayers()[(function()
				for i, plr in ipairs(game:GetService("Players"):GetPlayers()) do
					if ((string.lower(plr.Name):sub(1, string.len(msg:sub(8))) == string.lower(msg:sub(8))) or (string.lower(plr.DisplayName):sub(1, string.len(msg:sub(8))) == string.lower(msg:sub(8)))) then
						return i;
					end
				end
				return nil;
			end)()];
			if player then
				local botIndex = 1;
				for i, botName in pairs(bots) do
					if (string.lower(botName) == string.lower(game:GetService("Players").LocalPlayer.Name)) then
						botIndex = i;
						break;
					end
				end
				local offsets = {5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100};
				local offset = offsets[botIndex] or 0;
				if (player == game:GetService("Players").LocalPlayer) then
					chatmsg("The user you specified is one of your bots!");
				elseif table.find(bots, player.Name) then
					chatmsg("The user you specified is one of your bots!");
				else
					PartForBot = Instance.new("Part", game:GetService("Workspace"));
					PartForBot.Name = "NewPartInstance";
					PartForBot.CFrame = game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame;
					PartForBot.Transparency = 1;
					getgenv().LoopStack = true;
					local currentPlayer = player;
					while (getgenv().LoopStack == true) and (currentPlayer == player) do
						game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = workspace[player.Name]:WaitForChild("HumanoidRootPart").CFrame * CFrame.new(0, offset, 0);
						game:GetService("Workspace").NewPartInstance.CFrame = game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame * CFrame.new(0, -3.6, 0);
						task.wait();
						currentPlayer = game:GetService("Players"):GetPlayerByUserId(player.UserId);
					end
					for i, v in pairs(game:GetService("Workspace"):GetChildren()) do
						if (v.Name == "NewPartInstance") then
							v:Destroy();
						end
					end
				end
			end
		end
		if (msg == ".stopall") then
			getgenv().LoopSwarm, getgenv().LoopLine, getgenv().LoopWall, getgenv().LoopLook, getgenv().LoopFollow, getgenv().LoopGreet, getgenv().LoopStack = false, false, false, false, false, false, false;
		end
		if (msg == ".re") then
			game.Players.LocalPlayer.Character.Humanoid.Health = 0;
		end
		if (msg == ".re2") then
			local pos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame;
			game.Players.LocalPlayer.Character = nil;
			game.Players.LocalPlayer.Character = workspace[game.Players.LocalPlayer.Name];
			game.Players.LocalPlayer.Character.Humanoid.Health = 0;
			wait(game.Players.RespawnTime);
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos;
			game.Players.LocalPlayer.CharacterAdded:Wait():WaitForChild("HumanoidRootPart")['CFrame'] = pos;
			local FaggotFucktard = imgay.Character:WaitForChild("ForceField");
			FaggotFucktard:Destroy();
		end
		if (msg == ".sv") then
			game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest"):FireServer(".gg/hear", "All");
		end
		if (msg == ".unlookat") then
			getgenv().LoopLook = false;
		end
		if (msg == ".unswarm") then
			getgenv().LoopSwarm = false;
		end
		if (msg == ".unstack") then
			getgenv().LoopStack = false;
		end
		if (msg == ".unfollow") then
			getgenv().LoopFollow = false;
		end
		if (msg == ".unwall") then
			getgenv().LoopWall = false;
		end
		if (msg == ".unline") then
			getgenv().LoopLine = false;
		end
		if (msg == ".rotate") then
			local spin = Instance.new("BodyAngularVelocity", game.Players.LocalPlayer.Character.HumanoidRootPart);
			spin.AngularVelocity = Vector3.new(0, -25, 0);
			local TweenService = game:GetService("TweenService");
			local primaryPart = spin;
			local speed = 5;
			local rotation = Vector3.new(0, 25, 0);
			local tweenInfo = TweenInfo.new(speed, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0);
			local tween = TweenService:Create(primaryPart, tweenInfo, {AngularVelocity=rotation});
			tween:Play();
			tween.Completed:Connect(function(PlaybackState)
				if (PlaybackState == Enum.PlaybackState.Completed) then
					spin:Destroy();
				end
			end);
		end
		if (msg == ".playercount") then
			if (game.Players.LocalPlayer.Name == bots[1]) then
				local botAmount = 0;
				for _, player in pairs(game:GetService("Players"):GetPlayers()) do
					if table.find(bots, player.Name) then
						botAmount = botAmount + 1;
					end
				end
				local playerAmount = #game:GetService("Players"):GetPlayers() - botAmount;
				chatmsg("There are " .. #game:GetService("Players"):GetPlayers() .. " players currently in the server including " .. botAmount .. " bot(s), " .. playerAmount .. " players without the bot(s) being included!");
			elseif (game.Players.LocalPlayer.Name ~= bots[1]) then
			end
		end
	end);
end
